<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ATXItemGridTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ATXItemGridTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        InventTable         inventTable;
        ATXItemGridLines    itemGridLines;
        boolean             ret;
        ;

        ret = super();

        if (ret)
        {
            switch (this.DimComboType)
            {
                case ATXDimComboType::Configuration:
                    select firstonly inventTable
                        where inventTable.ATXItemConfigGridValue    == this.ItemGridId
                            && this.ItemGridId
                    ;
                    if (inventTable)
                    {
                        ret = checkFailed(strFmt("@ATXApparelAndTextile_en_US:ATXL00066", InventTable.ItemId));
                    }
                    break;

                case ATXDimComboType::Size:
                    select firstonly inventTable
                        where inventTable.ATXItemSizeGridValue      == this.ItemGridId
                        && this.ItemGridId
                    ;
                    if (inventTable)
                    {
                        ret = checkFailed(strFmt("@ATXApparelAndTextile_en_US:ATXL00066", InventTable.ItemId));
                    }
                    break;

                case ATXDimComboType::Color:
                    select firstonly inventTable
                        where inventTable.ATXItemColorGridValue     == this.ItemGridId
                        && this.ItemGridId
                    ;
                    if (inventTable)
                    {
                        ret = checkFailed(strFmt("@ATXApparelAndTextile_en_US:ATXL00066", InventTable.ItemId));
                    }
                    break;

                case ATXDimComboType::Style:
                    select firstonly inventTable
                        where inventTable.ATXItemStyleGridValue     == this.ItemGridId
                        && this.ItemGridId
                    ;
                    if (inventTable)
                    {
                        ret = checkFailed(strFmt("@ATXApparelAndTextile_en_US:ATXL00066", InventTable.ItemId));
                    }
                    break;
            }
        }
        if (ret)
        {
            select firstonly itemGridLines
                where itemGridLines.ItemGridId  == this.ItemGridId;
            if (itemGridLines)
                ret = checkFailed("No se puede eliminar un matriz con lÃ­neas. ()");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ATXItemGridId _itemGridId)
    {
        return _itemGridId && (select firstonly ATXItemGridTable
                                index hint ItemGridIdx
                                where ATXItemGridTable.ItemGridId == _itemGridId).RecId != 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>existByType</Name>
				<Source><![CDATA[
    static boolean existByType(ATXItemGridId _itemGridId, ATXDimComboType _type)
    {
        return _itemGridId && (select firstonly ATXItemGridTable
                                index hint ItemGridIdx
                                where   ATXItemGridTable.ItemGridId == _itemGridId
                                    &&  ATXItemGridTable.DimComboType == _type).RecId != 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ATXItemGridTable find(ATXItemGridId _itemGridId, boolean _update = false)
    {
        ATXItemGridTable  itemGridTable;

        ;

        if(_itemGridId)
        {
            itemGridTable.selectForUpdate(_update);

            select firstonly itemGridTable
                index hint ItemGridIdx
            where itemGridTable.ItemGridId == _itemGridId;
        }

        return itemGridTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByType</Name>
				<Source><![CDATA[
    static ATXItemGridTable findByType(ATXItemGridId _itemGridId, ATXDimComboType _type, boolean _update = false)
    {
        ATXItemGridTable  itemGridTable;

        ;

        if(_itemGridId)
        {
            itemGridTable.selectForUpdate(_update);

            select firstonly itemGridTable
                index hint ItemGridIdx
            where   itemGridTable.ItemGridId == _itemGridId
                &&  itemGridTable.DimComboType == _type;
        }

        return itemGridTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_fieldId"></param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        switch(_fieldId)
        {
            case fieldNum(ATXItemGridTable, ItemGridId):
                this.GridIdName = this.ItemGridId;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>ATXItemDimGrids</FormRef>
	<Label>@ATXAT:NewLabel66</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ItemGridId</TitleField1>
	<TitleField2>GridIdName</TitleField2>
	<ClusteredIndex>ItemGridIdx</ClusteredIndex>
	<PrimaryIndex>ItemGridIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGridId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GridIdName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimComboType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGridId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GridIdName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimComboType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DimComboType</Name>
			<EnumType>ATXDimComboType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GridIdName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGridId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ATXItemGridId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemGridIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemGridId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>