<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ATXProdQualityDimFieldSetUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ATXProdQualityDimFieldSetUp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    display EcoResProductDimensionName fieldName()
    {
        EcoResProductDimensionName  name;
        DictField                   dictField;

        if (!this.RecId)
        {
            return '';
        }

        name                    = fieldId2pname(tableNum(InventDim), this.DimensionFieldId);
        dictField               = new DictField(tableNum(InventDim), this.DimensionFieldId);

        if (!dictField.configurationKeyId() || isConfigurationkeyEnabled(dictField.configurationKeyId()))
        {
            return name;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductDimensionGroup</Name>
				<Source><![CDATA[
    void initFromProductDimensionGroup(ATXProdQualityTable _ProdQualityTable)
    {
        this.ProdQuality = _ProdQualityTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the buffer with default values.
    /// </summary>
    /// <remarks>
    ///    The <c>DimensionFieldId</c> field should be set before this method is called.
    /// </remarks>
    public void initValue()
    {
        #InventDimDevelop
        switch (this.DimensionFieldId)
        {
            case fieldNum(InventDim, ConfigId):
                this.LineNumber = 1;
                this.IsActive   = NoYes::Yes;
                break;
            case fieldNum(InventDim, InventSizeId):
                this.LineNumber = 2;
                if (!isConfigurationkeyEnabled(configurationKeyNum(Config))) // Ensuring that at least one dimension is active
                {
                    this.IsActive   = NoYes::Yes;
                }
                break;
            case fieldNum(InventDim, InventColorId):
                this.LineNumber = 3;
                if (!isConfigurationkeyEnabled(configurationKeyNum(Config))  // Ensuring that at least one dimension is active
             && !isConfigurationkeyEnabled(configurationKeyNum(EcoResProductSize)))
                {
                    this.IsActive   = NoYes::Yes;
                }
                break;
            // <SCM>
            case fieldNum(InventDim, InventStyleId):
                this.LineNumber = 4;
                if (!isConfigurationkeyEnabled(configurationKeyNum(Config))  // Ensuring that at least one dimension is active
             && !isConfigurationkeyEnabled(configurationKeyNum(EcoResProductSize))
             && !isConfigurationkeyEnabled(configurationKeyNum(EcoResProductColor)))
                {
                    this.IsActive   = NoYes::Yes;
                }
                break;
            // </SCM>
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionsActive</Name>
				<Source><![CDATA[
    public boolean validateDimensionsActive()
    {
        ATXProdQualityDimFieldSetUp origDimFieldSetup = this.orig();

        //check if the dim group is used by any product
        boolean dimGroupUsedByProduct()
        {
            ATXProdQualityDimFieldSetUp prodQualityDimFieldSetUp;

            select firstonly RecId
            from prodQualityDimFieldSetUp
                where prodQualityDimFieldSetUp.ProdQuality == this.ProdQuality;

            if (prodQualityDimFieldSetUp.RecId)
            {
                return true;
            }

            return false;
        }

        boolean dimGroupHasActiveDimension()
        {
            // Validate that at least 1 other dimension is active.
            ATXProdQualityDimFieldSetUp     prodQualityDimFieldSetUp;

            if (this.IsActive == NoYes::Yes)
            {
                return true;
            }

            select firstonly RecId from prodQualityDimFieldSetUp
            where prodQualityDimFieldSetUp.ProdQuality == this.ProdQuality
              &&  prodQualityDimFieldSetUp.DimensionFieldId      != this.DimensionFieldId
              &&  prodQualityDimFieldSetUp.IsActive              == NoYes::Yes;

            if (!prodQualityDimFieldSetUp.RecId)
            {
                return false;
            }

            return true;
        }

        void restoreData()
        {
            this.data(origDimFieldSetup);

            if (this.isFormDataSource())
            {
                this.dataSource().refresh();
            }
        }

        if (!this.RecId)
        {
            // initial data will always be consistent.
            return true;
        }

        if (this.IsActive != origDimFieldSetup.IsActive)
        {
            // IsActive field changed -> Not called during consistency check
            if (!dimGroupHasActiveDimension())
            {
                restoreData();
                return checkFailed("@SYS322628");
            }

            if (dimGroupUsedByProduct())
            {
                restoreData();
                return checkFailed("@SYS134208");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensionGroupFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an <c>EcoResProductDimensionGroupFldSetup</c> record using the
    ///    <c>EcoResProductDimensionGroup</c> record ID and the dimension field ID as the key.
    static public ATXProdQualityDimFieldSetUp findByDimensionGroupFieldId(
    RefRecId                            _productDimensionRecId,
    int                                 _dimensionFieldId,
    boolean                             _update = false)
    {
        ATXProdQualityDimFieldSetUp     prodQualityDimFieldSetUp;

        prodQualityDimFieldSetUp.selectForUpdate(_update);

        if (_productDimensionRecId && _dimensionFieldId)
        {
            select firstonly prodQualityDimFieldSetUp
            where prodQualityDimFieldSetUp.ProdQuality == _productDimensionRecId &&
                  prodQualityDimFieldSetUp.DimensionFieldId == _dimensionFieldId;
        }

        return prodQualityDimFieldSetUp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DimensionFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<RelatedTable>InventDim</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@ATXAT:NewLabel144</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProdQuality</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<ExtendedDataType>ATXAnyValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ATXProdQualityTable</Name>
			<RelatedTable>ATXProdQualityTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdQuality</Name>
					<Field>ProdQuality</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>