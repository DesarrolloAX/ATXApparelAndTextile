<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ATXTurnTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ATXTurnTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCalendar</Name>
				<Source><![CDATA[
    private CalendarId getCalendar(WrkCtrId _wrkctrId)
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        Hours                       hours = 0;
        WrkCtrResourceGroupCalendar wrkCtrResourceGroupCalendar;
        WorkCalendarDateLine        WorkCalendarDateLine;

        switch(WrkCtrTable::find(_wrkctrId).WrkCtrType)
        {
            case WrkCtrType::Machine:
            case WrkCtrType::Personnel:
            select firstOnly WrkCtrId from wrkCtrResourceGroupResource
                where wrkCtrResourceGroupResource.WrkCtrId == _wrkctrId;
                if(wrkCtrResourceGroupResource.WrkCtrId)
               wrkCtrResourceGroup = WrkCtrResourceGroup::find(wrkCtrResourceGroupResource.ResourceGroup);
                else
                return "";
                break;

            case WrkCtrType::Group:
                wrkCtrResourceGroup = WrkCtrResourceGroup::findWrkCtrId(_wrkctrId);
                break;

            default:
                return "";
        }

        wrkCtrResourceGroupCalendar = WrkCtrResourceGroupCalendar::findActiveForResourceGroup(wrkCtrResourceGroup.RecId,systemDateGet());

        return wrkCtrResourceGroupCalendar.CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ATXTurnId _turnId)
    {
        return _turnId && (select firstOnly  ATXTurnTable
        where   ATXTurnTable.TurnId == _turnId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTurn</Name>
				<Source><![CDATA[
    static boolean existTurn(ATXTurnId _turnId)
    {
        return _turnId && (select firstOnly  ATXTurnTable
                        where   ATXTurnTable.TurnId == _turnId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ATXTurnTable find(ATXTurnId _turnId, boolean _update = false)
    {
        ATXTurnTable turnTable;

        if(_turnId)
        {
            turnTable.selectForUpdate(_update);

            select firstOnly turnTable
            where turnTable.TurnId == _turnId
        ;
        }

        return turnTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySystemTime</Name>
				<Source><![CDATA[
    static ATXTurnTable findBySystemTime(WrkCtrId _wrkctrId, FromTime _time = timeNow())
    {
        ATXTurnTable turnTable;

        ;

        select firstOnly turnTable
        order by RecId
        where   turnTable.FromTime <= _time
            &&  turnTable.ToTime >= _time
            &&  turnTable.CalendarId == ATXTurnTable::getCalendarFromWRKCTR(_wrkctrId);

        if(!turnTable.RecId)
        {
            select firstOnly turnTable
        order by RecId
        where   turnTable.FromTime >= 79200
            &&  turnTable.ToTime <= 28800
            &&  turnTable.CalendarId == ATXTurnTable::getCalendarFromWRKCTR(_wrkctrId);
        }


        return turnTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarFromWRKCTR</Name>
				<Source><![CDATA[
    static CalendarId getCalendarFromWRKCTR(WrkCtrId _wrkctrId)
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        Hours                       hours = 0;
        WrkCtrResourceGroupCalendar wrkCtrResourceGroupCalendar;
        WorkCalendarDateLine        WorkCalendarDateLine;

        switch(WrkCtrTable::find(_wrkctrId).WrkCtrType)
        {
            case WrkCtrType::Machine:
            case WrkCtrType::Personnel:
            select firstOnly WrkCtrId from wrkCtrResourceGroupResource
                where wrkCtrResourceGroupResource.WrkCtrId == _wrkctrId;
                if(wrkCtrResourceGroupResource.CalendarId)
                return wrkCtrResourceGroupResource.CalendarId;

                if(wrkCtrResourceGroupResource.WrkCtrId)
               wrkCtrResourceGroup = WrkCtrResourceGroup::find(wrkCtrResourceGroupResource.ResourceGroup);
                else
                return "";
                break;

            case WrkCtrType::Group:
                wrkCtrResourceGroup = WrkCtrResourceGroup::findWrkCtrId(_wrkctrId);
                break;

            default:
                return "";
        }

        wrkCtrResourceGroupCalendar = WrkCtrResourceGroupCalendar::findActiveForResourceGroup(wrkCtrResourceGroup.RecId,systemDateGet());

        return wrkCtrResourceGroupCalendar.CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hours</Name>
				<Source><![CDATA[
    static Hours hours(ATXTurnId _turnId, Wrkctrid _wrkctrId)
    {
        ATXTurnTable    turnTable = ATXTurnTable::find(_turnId);
        Hours           hours;

        if(turnTable.Split)
        {
            hours = (( 86400 - turnTable.FromTime) / 3600) + turnTable.ToTime;
        }
        else
        {
            hours = (turnTable.ToTime - turnTable.FromTime) / 3600;
        }

        return hours;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TurnId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TurnId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Split</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SimpleGroup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TurnId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<ExtendedDataType>CalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<ExtendedDataType>FromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Split</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<ExtendedDataType>ToTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TurnId</Name>
			<ExtendedDataType>ATXTurnId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TurnIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TurnId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WorkCalendarTable</Name>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>