Private class __Persister__
extends SysDataEntityPersister
{
    // Data source ID macros
    #define.ATXSalesParameters_ID(1)
    
    // Data source buffers
    ATXSalesParameters m_ATXSalesParameters;
    
    protected void mapEntityToDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.validateFieldFailed = false;
        this.mapEntityToDataSource(_entityCtx, _entityCtx.getRuntimeContextByName('ATXSalesParameters'));
        this.mapEntityToDataSourcesExtensions(_entityCtx);
        if(this.validateFieldFailed)
        {
            throw Exception::ViewDataSourceValidation;
        }
    }
    protected boolean saveDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // save data sources in topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [ATXSalesParameters]
            if(!this.preSaveDataSource(_entityCtx, 'ATXSalesParameters'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('ATXSalesParameters');
            // propagates foreign key values from referenced data sources which are part of extensions.
            this.foreignKeyPropagationExtensions(_entityCtx, _dataSourceCtx);
            // inserts/updates data source [ATXSalesParameters].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    protected boolean deleteDataSources(DataEntityRuntimeContext _entityCtx)
    {
        boolean rtrn = true;
        DataEntityDataSourceRuntimeContext _dataSourceCtx = null;
        // delete data sources in reverse topological order.
        {
            // handle datasources which are part of extensions and need to be saved before [ATXSalesParameters]
            if(!this.preSaveDataSource(_entityCtx, 'ATXSalesParameters'))
            {
                return false;
            }
            _dataSourceCtx = _entityCtx.getRuntimeContextByName('ATXSalesParameters');
            // deletes data source [ATXSalesParameters].
            if(!this.saveDataSource(_entityCtx, _dataSourceCtx))
            {
                // returns from here if the root data source fails to be saved.
                return false;
            }
            this.postSaveDataSource();
        }
        // handle datasources which are part of extensions and need to be saved in last 
        this.preSaveDataSource(_entityCtx, '');
        return rtrn;
    }
    private void mapToDataSource_DS1(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, ATXSalesParameters _aTXSalesParameters, ATXSalesParametersEntity _aTXSalesParametersEntity)
    {
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, InventSiteId), _aTXSalesParameters, fieldnum(ATXSalesParameters, InventSiteId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, InventLocationId), _aTXSalesParameters, fieldnum(ATXSalesParameters, InventLocationId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, WMSLocationId), _aTXSalesParameters, fieldnum(ATXSalesParameters, WMSLocationId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, RequestOrderType), _aTXSalesParameters, fieldnum(ATXSalesParameters, RequestOrderType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, NumberSequenceId), _aTXSalesParameters, fieldnum(ATXSalesParameters, NumberSequenceId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, WMSOrderForSales), _aTXSalesParameters, fieldnum(ATXSalesParameters, WMSOrderForSales), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, ValidatePrice), _aTXSalesParameters, fieldnum(ATXSalesParameters, ValidatePrice), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, GenerateRequestBOMBatch), _aTXSalesParameters, fieldnum(ATXSalesParameters, GenerateRequestBOMBatch), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, SkipClosedSL), _aTXSalesParameters, fieldnum(ATXSalesParameters, SkipClosedSL), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, Key), _aTXSalesParameters, fieldnum(ATXSalesParameters, Key), 1);
        
        this.mapToDataSourceExtensions(_dataSourceCtx, _aTXSalesParameters, _aTXSalesParametersEntity);
        _aTXSalesParameters.trackFieldExternallySet(false);
    }
    protected void doMapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #ATXSalesParameters_ID:
                this.mapToDataSource_DS1(_entityCtx, _dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapEntityToDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    private void mapFromDataSource_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, ATXSalesParameters _aTXSalesParameters, ATXSalesParametersEntity _aTXSalesParametersEntity)
    {
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, InventSiteId), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, InventSiteId), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, InventLocationId), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, InventLocationId), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, WMSLocationId), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, WMSLocationId), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, RequestOrderType), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, RequestOrderType), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, NumberSequenceId), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, NumberSequenceId), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, WMSOrderForSales), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, WMSOrderForSales), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, ValidatePrice), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, ValidatePrice), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, GenerateRequestBOMBatch), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, GenerateRequestBOMBatch), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, SkipClosedSL), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, SkipClosedSL), false);
        this.mapDataSourceFieldToEntityField(_aTXSalesParameters, fieldnum(ATXSalesParameters, Key), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, Key), false);
        this.mapFromDataSourceExtensions(_dataSourceCtx, _aTXSalesParameters, _aTXSalesParametersEntity);
        // map system fields (e.g. recid and recversion) from data source buffer to view record.
        _aTXSalesParametersEntity.fromViewDataSource(_dataSourceCtx.id(), _aTXSalesParameters);
    }
    protected void doMapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.id())
        {
            case #ATXSalesParameters_ID:
                this.mapFromDataSource_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _entityCtx.getEntityRecord());
                break;
            default :
                this.doMapDataSourceToEntityExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
    }
    protected Common doFindDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common rtrn = null;
        switch(_dataSourceCtx.id())
        {
            case #ATXSalesParameters_ID:
                rtrn = this.LookForUniqueKeyMatch_DS1(_entityCtx.getEntityRecord(), _dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.doFindDataSourceExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet_DS1(ATXSalesParametersEntity _aTXSalesParametersEntity, str disabledConfigKey = null)
    {
        boolean rtrn = false;
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, InventSiteId)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, InventLocationId)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, WMSLocationId)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, RequestOrderType)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, NumberSequenceId)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, WMSOrderForSales)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, ValidatePrice)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, GenerateRequestBOMBatch)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, SkipClosedSL)))
        {
            return true;
        }
        if(_aTXSalesParametersEntity.isFieldSet(fieldnum(ATXSalesParametersEntity, Key)))
        {
            return true;
        }
        rtrn = this.isAnyMappedDataSourceExtensionFieldSet(_aTXSalesParametersEntity, 'ATXSalesParameters', disabledConfigKey);
        return rtrn;
    }
    protected boolean isAnyMappedDataSourceFieldSet(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = false;
        switch(_dataSourceCtx.id())
        {
            case #ATXSalesParameters_ID:
                rtrn = this.isAnyMappedDataSourceFieldSet_DS1(_entityCtx.getEntityRecord());
                break;
            default :
                rtrn = this.isAnyMappedDataSourceFieldSet_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private boolean validateDataSource_DS1(DataEntityRuntimeContext _entityCtx, ATXSalesParametersEntity _aTXSalesParametersEntity, DataEntityDataSourceRuntimeContext _dataSourceCtx, ATXSalesParameters _aTXSalesParameters)
    {
        boolean rtrn = true;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, InventSiteId), 'ATXSalesParametersEntity.InventSiteId', _aTXSalesParameters, fieldnum(ATXSalesParameters, InventSiteId), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, InventLocationId), 'ATXSalesParametersEntity.InventLocationId', _aTXSalesParameters, fieldnum(ATXSalesParameters, InventLocationId), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, WMSLocationId), 'ATXSalesParametersEntity.WMSLocationId', _aTXSalesParameters, fieldnum(ATXSalesParameters, WMSLocationId), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, RequestOrderType), 'ATXSalesParametersEntity.RequestOrderType', _aTXSalesParameters, fieldnum(ATXSalesParameters, RequestOrderType), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, NumberSequenceId), 'ATXSalesParametersEntity.NumberSequenceId', _aTXSalesParameters, fieldnum(ATXSalesParameters, NumberSequenceId), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, WMSOrderForSales), 'ATXSalesParametersEntity.WMSOrderForSales', _aTXSalesParameters, fieldnum(ATXSalesParameters, WMSOrderForSales), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, ValidatePrice), 'ATXSalesParametersEntity.ValidatePrice', _aTXSalesParameters, fieldnum(ATXSalesParameters, ValidatePrice), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, GenerateRequestBOMBatch), 'ATXSalesParametersEntity.GenerateRequestBOMBatch', _aTXSalesParameters, fieldnum(ATXSalesParameters, GenerateRequestBOMBatch), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, SkipClosedSL), 'ATXSalesParametersEntity.SkipClosedSL', _aTXSalesParameters, fieldnum(ATXSalesParameters, SkipClosedSL), false/*disallowEditOnCreate*/, false/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateMappedDataSourceField(_entityCtx, _dataSourceCtx, '', '', conNull(), _aTXSalesParametersEntity, fieldnum(ATXSalesParametersEntity, Key), 'ATXSalesParametersEntity.Key', _aTXSalesParameters, fieldnum(ATXSalesParameters, Key), true/*disallowEditOnCreate*/, true/*disallowEdit*/, true/*callValidateField*/, 1) ? rtrn : false;
        rtrn = this.validateDataSourceExtensions(_entityCtx, _aTXSalesParametersEntity, _dataSourceCtx, _aTXSalesParameters) ? rtrn : false;
        return rtrn;
    }
    protected boolean validateDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean rtrn = true;
        switch(_dataSourceCtx.id())
        {
            case #ATXSalesParameters_ID:
                rtrn = this.validateDataSource_DS1(_entityCtx,_entityCtx.getEntityRecord(),_dataSourceCtx,_dataSourceCtx.getBuffer());
                break;
            default :
                rtrn = this.validateDataSourceExtensions_DSExtensions(_entityCtx, _dataSourceCtx);
                break;
        }
        return rtrn;
    }
    private void mapToMatchingRecord_DS1(DataEntityDataSourceRuntimeContext _dataSourceCtx, ATXSalesParameters _aTXSalesParameters, ATXSalesParameters _matchingRecord)
    {
        // map data changes in bound fields.
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, InventSiteId), _matchingRecord, fieldnum(ATXSalesParameters, InventSiteId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, InventLocationId), _matchingRecord, fieldnum(ATXSalesParameters, InventLocationId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, WMSLocationId), _matchingRecord, fieldnum(ATXSalesParameters, WMSLocationId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, RequestOrderType), _matchingRecord, fieldnum(ATXSalesParameters, RequestOrderType), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, NumberSequenceId), _matchingRecord, fieldnum(ATXSalesParameters, NumberSequenceId), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, WMSOrderForSales), _matchingRecord, fieldnum(ATXSalesParameters, WMSOrderForSales), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, ValidatePrice), _matchingRecord, fieldnum(ATXSalesParameters, ValidatePrice), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, GenerateRequestBOMBatch), _matchingRecord, fieldnum(ATXSalesParameters, GenerateRequestBOMBatch), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, SkipClosedSL), _matchingRecord, fieldnum(ATXSalesParameters, SkipClosedSL), 1);
        this.mapEntityFieldToDataSourceField(_dataSourceCtx.getDatabaseOperation(), _aTXSalesParameters, fieldnum(ATXSalesParameters, Key), _matchingRecord, fieldnum(ATXSalesParameters, Key), 1);
        this.mapToMatchingRecordExtensions(_dataSourceCtx, tablestr(ATXSalesParametersEntity), _aTXSalesParameters, _matchingRecord);
    }
    protected void mapDataSourceToMatchingRecord(DataEntityDataSourceRuntimeContext _dataSourceCtx, Common _matchingRecord)
    {
        switch(_dataSourceCtx.id())
        {
            case #ATXSalesParameters_ID:
                this.mapToMatchingRecord_DS1(_dataSourceCtx, _dataSourceCtx.getBuffer(), _matchingRecord);
                break;
            default :
                this.mapDataSourceToMatchingRecordExtensions(_dataSourceCtx, _matchingRecord);
                break;
        }
    }
    protected void validateConfigurationKeys(DataEntityRuntimeContext _entityCtx)
    {
    }
    protected void initializeDataSources(DataEntityRuntimeContext _entityCtx)
    {
        this.initializeDataSource(_entityCtx, 'ATXSalesParameters', m_ATXSalesParameters, this.getDataSourceId('ATXSalesParameters'), this.getDataSourceRuntimeId('ATXSalesParameters'), false/* optional */, false/* readonly */, false/* oneToMany */, false/* dateEffective */, false/* applyDateFilter */);
        this.initializeDataSourcesExtensions(_entityCtx);
    }
    private ATXSalesParameters LookForUniqueKeyMatch_DS1(ATXSalesParametersEntity _aTXSalesParametersEntity, ATXSalesParameters _aTXSalesParameters)
    {
        ATXSalesParameters aTXSalesParameters_ = null;
        
        select
            forUpdate
            firstOnly
                aTXSalesParameters_
        where
            aTXSalesParameters_.Key == _aTXSalesParameters.Key
        ;
        
        if (aTXSalesParameters_)
        {
            return aTXSalesParameters_;
        }
        
        return aTXSalesParameters_;
    }

}

